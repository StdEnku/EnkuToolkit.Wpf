namespace EnkuToolkit.Wpf.MarkupExtensions;

using System;
using System.Windows;
using System.Windows.Markup;
using System.Diagnostics;

/// <summary>
/// It is assumed to be implemented in a child class of Application, which has an interface with a property to obtain the ServiceProvider of the DI container and performs the initial configuration of the DI container.
/// </summary>
public interface IServicesOwner
{
    /// <summary>
    /// Property to get the ServiceProvider of the DI container
    /// </summary>
    IServiceProvider Services { get; }
}

/// <summary>
/// Markup extension to retrieve ViewModel from DI container, available only when the App class generated when creating a WPF project implements IServicesOwner
/// </summary>
[MarkupExtensionReturnType(typeof(object))]
public class ViewModelProviderExtension : MarkupExtension
{
    private Type _type;

    /// <summary>
    /// Constructor
    /// </summary>
    /// <param name="type">Type object indicating the ViewModel type</param>
    public ViewModelProviderExtension(Type type)
    {
        _type = type;
    }

    /// <summary>
    /// Methods to create return values for this markup extension
    /// </summary>
    /// <returns>ViewModel object generated from a DI container</returns>
    /// <exception cref="InvalidOperationException">
    /// Exception thrown when a ViewModel cannot be generated by a DI container
    /// </exception>
    public override object? ProvideValue(IServiceProvider serviceProvider)
    {
        var servicesOwner = (IServicesOwner)Application.Current;
        var services = servicesOwner.Services;

        Debug.Assert(_type is not null);
        var result = services.GetService(_type);

        if (result is null)
            throw new InvalidOperationException($"DI container could not generate type {_type.FullName}.");

        return result;
    }
}